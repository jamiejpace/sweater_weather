require 'rails_helper'

RSpec.describe 'forecast serializer', :vcr do
  it 'serializes forecast objects into json' do
    forecast = OpenWeatherFacade.get_weather(39.738453, -104.984853)
    forecast_json = JSON.parse(ForecastSerializer.new(forecast).to_json, symbolize_names: true)

    expect(forecast_json).to be_a(Hash)
    expect(forecast_json).to have_key(:data)
    expect(forecast_json[:data]).to be_a(Hash)
    expect(forecast_json[:data]).to have_key(:id)
    expect(forecast_json[:data][:id]).to eq(nil)
    expect(forecast_json[:data]).to have_key(:type)
    expect(forecast_json[:data][:type]).to eq("forecast")
    expect(forecast_json[:data]).to have_key(:attributes)
    expect(forecast_json[:data][:attributes]).to be_a(Hash)

    expect(forecast_json[:data][:attributes]).to have_key(:current_weather)
    expect(forecast_json[:data][:attributes][:current_weather]).to be_a(Hash)
    expect(forecast_json[:data][:attributes][:current_weather]).to_not have_key(:moonrise)
    expect(forecast_json[:data][:attributes][:current_weather]).to_not have_key(:moonset)
    expect(forecast_json[:data][:attributes][:current_weather]).to_not have_key(:moonphase)
    expect(forecast_json[:data][:attributes][:current_weather]).to_not have_key(:dewpoint)
    expect(forecast_json[:data][:attributes][:current_weather]).to_not have_key(:wind_speed)
    expect(forecast_json[:data][:attributes][:current_weather]).to have_key(:datetime)
    expect(forecast_json[:data][:attributes][:current_weather][:datetime]).to be_a(String)
    expect(forecast_json[:data][:attributes][:current_weather]).to have_key(:sunrise)
    expect(forecast_json[:data][:attributes][:current_weather][:sunrise]).to be_a(String)
    expect(forecast_json[:data][:attributes][:current_weather]).to have_key(:sunset)
    expect(forecast_json[:data][:attributes][:current_weather][:sunset]).to be_a(String)
    expect(forecast_json[:data][:attributes][:current_weather]).to have_key(:temperature)
    expect(forecast_json[:data][:attributes][:current_weather][:temperature]).to be_a(Float)
    expect(forecast_json[:data][:attributes][:current_weather]).to have_key(:feels_like)
    expect(forecast_json[:data][:attributes][:current_weather][:feels_like]).to be_a(Float)
    expect(forecast_json[:data][:attributes][:current_weather]).to have_key(:humidity)
    expect(forecast_json[:data][:attributes][:current_weather][:humidity]).to be_a(Integer)
    expect(forecast_json[:data][:attributes][:current_weather]).to have_key(:uvi)
    expect(forecast_json[:data][:attributes][:current_weather][:uvi].to_f).to be_a(Float)
    expect(forecast_json[:data][:attributes][:current_weather]).to have_key(:visibility)
    expect(forecast_json[:data][:attributes][:current_weather][:visibility].to_f).to be_a(Float)
    expect(forecast_json[:data][:attributes][:current_weather]).to have_key(:conditions)
    expect(forecast_json[:data][:attributes][:current_weather][:conditions]).to be_a(String)
    expect(forecast_json[:data][:attributes][:current_weather]).to have_key(:icon)
    expect(forecast_json[:data][:attributes][:current_weather][:icon]).to be_a(String)

    expect(forecast_json[:data][:attributes]).to have_key(:daily_weather)
    expect(forecast_json[:data][:attributes][:daily_weather]).to be_an(Array)
    expect(forecast_json[:data][:attributes][:daily_weather].first).to be_a(Hash)
    expect(forecast_json[:data][:attributes][:daily_weather].first).to have_key(:date)
    expect(forecast_json[:data][:attributes][:daily_weather].first[:date]).to be_a(String)
    expect(forecast_json[:data][:attributes][:daily_weather].first).to have_key(:sunrise)
    expect(forecast_json[:data][:attributes][:daily_weather].first[:sunrise]).to be_a(String)
    expect(forecast_json[:data][:attributes][:daily_weather].first).to have_key(:max_temp)
    expect(forecast_json[:data][:attributes][:daily_weather].first[:max_temp]).to be_a(Float)
    expect(forecast_json[:data][:attributes][:daily_weather].first).to have_key(:min_temp)
    expect(forecast_json[:data][:attributes][:daily_weather].first[:min_temp]).to be_a(Float)
    expect(forecast_json[:data][:attributes][:daily_weather].first).to have_key(:conditions)
    expect(forecast_json[:data][:attributes][:daily_weather].first[:conditions]).to be_a(String)
    expect(forecast_json[:data][:attributes][:daily_weather].first).to have_key(:icon)
    expect(forecast_json[:data][:attributes][:daily_weather].first[:icon]).to be_a(String)

    expect(forecast_json[:data][:attributes]).to have_key(:hourly_weather)
    expect(forecast_json[:data][:attributes][:hourly_weather]).to be_an(Array)
    expect(forecast_json[:data][:attributes][:hourly_weather].first).to be_a(Hash)
    expect(forecast_json[:data][:attributes][:hourly_weather].first).to have_key(:time)
    expect(forecast_json[:data][:attributes][:hourly_weather].first[:time]).to be_a(String)
    expect(forecast_json[:data][:attributes][:hourly_weather].first).to have_key(:temperature)
    expect(forecast_json[:data][:attributes][:hourly_weather].first[:temperature]).to be_a(Float)
    expect(forecast_json[:data][:attributes][:hourly_weather].first).to have_key(:conditions)
    expect(forecast_json[:data][:attributes][:hourly_weather].first[:conditions]).to be_a(String)
    expect(forecast_json[:data][:attributes][:hourly_weather].first).to have_key(:icon)
    expect(forecast_json[:data][:attributes][:hourly_weather].first[:icon]).to be_a(String)
  end
end
